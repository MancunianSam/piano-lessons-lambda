//// SNIPPET:BUILD

package build
import mill._
import mill.define.ModuleRef
import scalalib._
import $ivy.`com.lihaoyi::mill-contrib-twirllib:`,  mill.twirllib._


object ZincWorkerGraalvm extends ZincWorkerModule {
  override def jvmId = "graalvm-java21:21.0.2"
}

object `piano-lessons` extends ScalaModule with TwirlModule with NativeImageModule {
  def scalaVersion = "3.6.4"

  override def mainClass: Target[Some[String]] = Some("dev.sampalmer.calendar.Lambda")
  override def nativeImageOptions: T[Seq[String]] = Seq(
    "--verbose",
    "--no-fallback",
    "--enable-http",
    "--enable-https",
    "--strict-image-heap",
    "-H:+UnlockExperimentalVMOptions",
    "-H:ClassInitialization=org.slf4j:build_time",
    "-H:ClassInitialization=requests.RequestBlob$FormEncodedRequestBlob:build_time",
    "-H:+ReportUnsupportedElementsAtRuntime",
    "-R:MaxHeapSize=64m",
    "-Dsoftware.amazon.awssdk.http.service.impl=software.amazon.awssdk.http.urlconnection.UrlConnectionSdkHttpService"
  )

  override def zincWorker: ModuleRef[ZincWorkerModule] = ModuleRef(ZincWorkerGraalvm)
  override def scalacOptions: T[Seq[String]] = Seq("-Wunused:imports", "-deprecation", "-experimental")
  override def ivyDeps = Agg(
    ivy"com.typesafe.play::twirl-api:1.6.6",
    ivy"org.encalmo::scala-aws-lambda-runtime:0.9.11",
    ivy"org.encalmo::scala-aws-lambda-multihandler:0.9.4",
    ivy"org.encalmo::scala-aws-client:0.9.8".exclude("software.amazon.awssdk"-> "apache-client", "software.amazon.awssdk" -> "netty-nio-client"),
    ivy"org.encalmo::scala-aws-lambda-utils:0.9.5",
    ivy"org.encalmo::opaque-type:0.9.2",
    ivy"org.slf4j:slf4j-nop:2.0.17",
    ivy"com.lihaoyi::ujson:4.1.0",
    ivy"com.softwaremill.sttp.client3::httpclient-backend:3.5.2",
    ivy"com.softwaremill.sttp.client3::core:3.11.0",
    ivy"com.auth0:java-jwt:4.5.0"
  )

  object test extends ScalaTests {
    override def ivyDeps = Agg(ivy"com.lihaoyi::utest:0.8.5")
    def testFramework = "utest.runner.Framework"
  }

  override def twirlVersion: T[String] = "2.0.8"
  def generatedSources = Task { Seq(compileTwirl().classes) }
}

// This is a basic Mill build for a single `ScalaModule`, with two
// third-party dependencies and a test suite using the uTest framework.
//
//// SNIPPET:END
//
// You can download this example project using the *download* link above
// if you want to try out the commands below yourself, or browse the full sources
// of the example (including supporting files) via the *browse* link. The only requirement is
// that you have some version of the JVM installed; the `./mill` script
// (`./mill.bat` on windows) takes
// care of any further dependencies that need to be downloaded. All examples
// in this documentation site are executable and are continually exercised as
// part of Mill's CI workflows, and they range from the simple hello-world
// projects on this page to more sophisticated
// xref:{language-small}lib/web-examples.adoc[web build examples] or
// xref:{language-small}lib/build-examples.adoc[example
// builds for real-world projects]
//
// The source code for this module lives in the `src/` folder.
// Output for this module (compiled files, resolved dependency lists, ...)
// lives in `out/`.

//// SNIPPET:TREE
// ----
// build.mill
// foo/
//     src/
//         Foo.scala
//     resources/
//         ...
//     test/
//         src/
//             FooTests.scala
// out/foo/
//     compile.json
//     compile.dest/
//     ...
//     test/
//         compile.json
//         compile.dest/
//         ...
// ----
//
// NOTE: The default Mill source folder layout `foo/src/` differs from that of SBT's
// `foo/src/main/scala`.
// If you wish to use the SBT source folder layout, e.g. for migrating
// an existing codebase, you should use
// xref:#_sbt_compatible_modules[SBT-Compatible Modules]
//
//// SNIPPET:END
//
//// SNIPPET:DEPENDENCIES
//
// This example project uses two third-party dependencies - MainArgs for CLI
// argument parsing, Scalatags for HTML generation - and uses them to wrap a
// given input string in HTML templates with proper escaping.
//
// Typical usage of a `ScalaModule` is shown below:

/** Usage

> ./mill resolve foo._ # List what tasks are available to run
foo.assembly
...
foo.compile
...
foo.run
...

> ./mill inspect foo.compile # Show documentation and inputs of a task
foo.compile(ScalaModule.scala:...)
    Compiles the current module to generate compiled classfiles/bytecode.
Inputs:
    foo.scalaVersion
    foo.upstreamCompileOutput
    foo.allSourceFiles
    foo.compileClasspath

> ./mill foo.compile # compile sources into classfiles
...
compiling 1 Scala source to...

> ./mill foo.run # run the main method, if any
error: Missing argument: --text <str>

> ./mill foo.run --text hello
<h1>hello</h1>

> ./mill foo.test
...
+ foo.FooTests...simple ...  <h1>hello</h1>
+ foo.FooTests...escaping ...  <h1>&lt;hello&gt;</h1>

> ./mill foo.assembly # bundle classfiles and libraries into a jar for deployment

> ./mill show foo.assembly # show the output of the assembly task
".../out/foo/assembly.dest/out.jar"

> java -jar ./out/foo/assembly.dest/out.jar --text hello
<h1>hello</h1>

> ./out/foo/assembly.dest/out.jar --text hello # mac/linux
<h1>hello</h1>

> # Note that on windows you need to rename `out.jar` to `out.bat` to run it
> cp ./out/foo/assembly.dest/out.jar out.bat # windows

> ./out.bat --text hello # windows
<h1>hello</h1>

*/

//// SNIPPET:END

// The output of every Mill task is stored in the `out/` folder under a name
// corresponding to the task that created it. e.g. The `assembly` task puts its
// metadata output in `out/assembly.json`, and its output files in
// `out/assembly.dest`. You can also use `show` to make Mill print out the
// metadata output for a particular task.
//
// Additional Mill tasks you would likely need include:
//
// [source,bash]
// ----
// $ mill runBackground # run the main method in the background
//
// $ mill clean <task>  # delete the cached output of a task, terminate any runBackground
//
// $ mill launcher      # prepares a foo/launcher.dest/run you can run later
//
// $ mill jar           # bundle the classfiles into a jar suitable for publishing
//
// $ mill -i console    # start a Scala console within your project
//
// $ mill -i repl       # start an Ammonite Scala REPL within your project
//
// $ mill -w compile    # watch input files and re-compile whenever a file changes
// ----
//
// You can run `+mill resolve __+` to see a full list of the different tasks that
// are available, `+mill resolve _+` to see the tasks within `foo`,
// `mill inspect compile` to inspect a task's doc-comment documentation or what
// it depends on, or `mill show foo.scalaVersion` to show the output of any task.
//
// The most common *tasks* that Mill can run are cached tasks, such as
// `compile`, and un-cached *commands* such as `foo.run`. Cached tasks do not
// re-evaluate unless one of their inputs changes, whereas commands re-run every
// time. See the documentation for xref:fundamentals/tasks.adoc[Tasks] for
// details on the different task types.
//
// Mill build files are xref:depth/why-scala.adoc[written in Scala], but you do not need
// to have prior experience in Scala to read or write them. Like Gradle Groovy or Maven
// XML, anyone can learn enough Scala for Mill without needing to become an expert in
// the language.
